# Test mcast (basic)
&test('mcast1', '',
  'mcast', '',
  [
    '--oc', 'results/mcast1',
    '--verbosity', '1',
    '--max-gap', '60',
    '--seed', '3',
    make_test_src_path('meme/meme.lex0.zoops.txt'), 
    'common/lex0.s'
  ],
  [
    {
      output => 'results/mcast1/mcast.tsv', 
      reference => make_test_src_path('mcast/lex0.zoops.tsv'), 
      type => 'text', 
      ignore => ['^#']
    },
    {
      output => 'results/mcast1/mcast.gff', 
      reference => make_test_src_path('mcast/lex0.zoops.gff'), 
      type => 'text', 
      ignore => ['^#']
    },
    {
      output => 'results/mcast1/mcast.xml', 
      reference => make_test_src_path('mcast/lex0.zoops.xml'), 
      type => 'xml', 
      ignore => [
        '^mcast@(release|version)$',
        '^mcast:command-line#value$',
        '^mcast:pattern-file#value$',
      ]
    },
    {
      output => 'results/mcast1/cisml.xml', 
      reference => make_test_src_path('mcast/lex0.zoops.cisml'), 
      type => 'xml', 
      ignore => [ 
        '^cis-element-search:parameters:pattern-file',
        '^cis-element-search:parameters:sequence-file'
      ]
    },
    {
      output => 'results/mcast1/mcast.html', 
      reference => make_test_src_path('mcast/lex0.zoops.html'), 
      type => 'json', 
      ignore => [
        'data:(version|revision|release|cmd|runtime)',
        'data:motif_dbs@1:file',
        'data:sequence_dbs@1:file'
      ]
    }
  ],
  'results/mcast1'
);

&test('mcast2', '',
  'mcast', '',
  [
    '--oc', 'results/mcast2', 
    '--verbosity', '1',
    '--motif-pthresh', '0.01',
    '--parse-genomic-coord', 
    '--output-pthresh', '0.5',
    make_test_src_path('fimo/GCN4.meme.txt'), 
    make_test_src_path('fimo/GCN4_YPD-genomic.fasta')
  ],
  [
    {
      output => 'results/mcast2/mcast.tsv', 
      reference => make_test_src_path('mcast/parse_genomic.tsv'), 
      type => 'text', 
      ignore => ['^#']
    },
    {
      output => 'results/mcast2/mcast.gff', 
      reference => make_test_src_path('mcast/parse_genomic.gff'), 
      type => 'text', 
      ignore => ['^#']
    },
    {
      output => 'results/mcast2/mcast.xml', 
      reference => make_test_src_path('mcast/parse_genomic.xml'), 
      type => 'xml', 
      ignore => [
        '^mcast@(release|version)$',
        '^mcast:command-line#value$'
      ]
    },
    {
      output => 'results/mcast2/cisml.xml', 
      reference => make_test_src_path('mcast/parse_genomic.cisml'), 
      type => 'xml', 
      ignore => [
        '^cis-element-search:parameters:pattern-file',
        '^cis-element-search:parameters:sequence-file'
      ]
    },
    {
      output => 'results/mcast2/mcast.html', 
      reference => make_test_src_path('mcast/parse_genomic.html'), 
      type => 'json', 
      ignore => [
        'data:(version|revision|release|cmd|runtime)',
        'data:motif_dbs@1:file',
        'data:sequence_dbs@1:file'
      ]
    }
  ],
  'results/mcast2'
);

if (&is_comprehensive()) {
  &test('mcast3', '',
    'mcast', '',
    [
      '--oc', 'results/mcast3',
      '--verbosity', '1',
      '--motif-pthresh', '1e-3',
      '--max-gap', '60',
      '--hardmask',
      make_test_src_path('common/mcast_motifs.meme'), 
      'common/mcast_seqs.fa'
    ],
    [
      {
	output => 'results/mcast3/mcast.tsv', 
	reference => make_test_src_path('mcast/mcast3.tsv'), 
	type => 'text', 
	ignore => ['^#']
      },
      {
	output => 'results/mcast3/mcast.gff', 
	reference => make_test_src_path('mcast/mcast3.gff'), 
	type => 'text', 
	ignore => ['^#']
      },
      {
	output => 'results/mcast3/mcast.xml', 
	reference => make_test_src_path('mcast/mcast3.xml'), 
	type => 'xml', 
	ignore => [
	  '^mcast@(release|version)$',
	  '^mcast:command-line#value$',
	  '^mcast:pattern-file#value$',
	]
      },
      {
	output => 'results/mcast3/cisml.xml', 
	reference => make_test_src_path('mcast/mcast3.cisml'), 
	type => 'xml', 
	ignore => [ 
	  '^cis-element-search:parameters:pattern-file',
	  '^cis-element-search:parameters:sequence-file'
	]
      },
      {
	output => 'results/mcast3/mcast.html', 
	reference => make_test_src_path('mcast/mcast3.html'), 
	type => 'json', 
	ignore => [
	  'data:(version|revision|release|cmd|runtime)',
	  'data:motif_dbs@1:file',
	  'data:sequence_dbs@1:file'
	]
      }
    ],
    'results/mcast3'
  );

  # Run tests using PSP and WIG files.
  my @tests = ('4', '5');
  my @prior_extensions = ('psp', 'wig');
  my $i;
  for ($i=0; $i<2; $i++) {
    my $t = $tests[$i];
    my $ext = $prior_extensions[$i];
    my $test = 'mcast'.$t;
    &test($test, '',
      'mcast', '',
      [
	'--oc', "results/$test",
	'--verbosity', '1',
	'--motif-pthresh', '0.01',
	'--psp', make_test_src_path("fimo/GCN4_YPD.$ext"),
	'--prior-dist', make_test_src_path('fimo/prior.dist.txt'),
	make_test_src_path('fimo/GCN4.meme.txt'),
	make_test_src_path('fimo/GCN4_YPD.fasta')
      ],
      [
	{
	  output => "results/$test/mcast.tsv", 
	  reference => make_test_src_path("mcast/$test.tsv"), 
	  type => 'text', 
	  ignore => ['^#']
	},
	{
	  output => "results/$test/mcast.gff", 
	  reference => make_test_src_path("mcast/$test.gff"), 
	  type => 'text', 
	  ignore => ['^#']
	},
	{
	  output => "results/$test/mcast.xml", 
	  reference => make_test_src_path("mcast/$test.xml"), 
	  type => 'xml', 
	  ignore => [
	    '^mcast@(release|version)$',
	    '^mcast:command-line#value$',
	    '^mcast:pattern-file#value$',
	  ]
	},
	{
	  output => "results/$test/cisml.xml",
	  reference => make_test_src_path("mcast/$test.cisml"), 
	  type => 'xml', 
	  ignore => [ 
	    '^cis-element-search:parameters:pattern-file',
	    '^cis-element-search:parameters:sequence-file'
	  ]
	},
	{
	  output => "results/$test/mcast.html", 
	  reference => make_test_src_path("mcast/$test.html"), 
	  type => 'json', 
	  ignore => [
	    'data:(version|revision|release|cmd|runtime)',
	    'data:motif_dbs@1:file',
	    'data:sequence_dbs@1:file',
	    'data:sequence_dbs@1:psp_file',
	    'data:sequence_dbs@1:dist_file'
	  ]
	}
      ],
      "results/$test"
    );
  } // 
}

## Process this file with automake to produce Makefile.in
##

AUTOMAKE_OPTIONS = no-dependencies

distdir = ${PACKAGE_NAME}-${PACKAGE_VERSION}
memelibdir = ${libdir}/${PACKAGE_NAME}-${PACKAGE_VERSION}
memelibexecdir = ${libexecdir}/${PACKAGE_NAME}-${PACKAGE_VERSION}
memedatadir = $(DESTDIR)${datadir}/${PACKAGE_NAME}-${PACKAGE_VERSION}

SUBDIRS = etc src scripts tests doc website

SEDSPEC = \
  -e 's%@catalina.home@%$(CATALINA_HOME)%' \
  -e 's%@catalina.base@%$(CATALINA_BASE)%' \
  -e 's%@version@%$(VERSION)%' \
  -e 's%@site.url@%${URL}%' \
  -e 's%@site.services@%$(OPAL_URL)%' \
  -e 's%@site.DN@%$(OPAL_DN)%' \
  -e 's%@site.contact@%$(CONTACT)%' \
  -e 's%@developer.contact@%$(DEV_CONTACT)%' \
  -e 's%@expiry@%${EXPIRY}%' \
  -e 's%@bin.dir@%$(bindir)%' \
  -e 's%@etc.dir@%$(sysconfdir)%' \
  -e 's%@lib.dir@%$(memelibdir)%' \
  -e 's%@libexec.dir@%$(memelibexecdir)%' \
  -e 's%@db.dir@%$(MEME_DB)%' \
  -e 's%@sendmail@%$(SENDMAIL)%' \
  -e 's%@MYHOME@%$(top_srcdir)%' \
  -e 's%@quota@%$(QUOTA)%' \
  -e 's%@drmaa_queue@%$(DRMAA_QUEUE)%' \
  -e 's%@drmaa_queue_short@%$(DRMAA_QUEUE_SHORT)%' 

# load the list of website files into the variable WEBSITE_FILES
# this should be generated by the bootstrap but can be regenerated by the command:
# ant generate-web-file-list
include website.mk

# Set the archive revision and date to refer to the changeset tagged as
# the original release or the current changeset if there is no such older tag.
ARCHIVE_DATE:
	git log -1 --format=%cd > $(top_srcdir)/ARCHIVE_DATE

ARCHIVE_REVISION:
	git rev-parse HEAD > $(top_srcdir)/ARCHIVE_REVISION

MemeSuite.properties: MemeSuite.properties.in Makefile
	$(SED) $(SEDSPEC) $< > $@

build.xml: build.xml.in Makefile
	$(SED) $(SEDSPEC) $< > $@

dbdir:
	mkdir -p $(DESTDIR)$(MEME_DB)

all-local:
if WEB
	$(ANT) compile
endif

install-data-local:
if WEB
	mkdir -p $(DEST_DIR)$(MEME_LOGS)
	chmod a+w $(DEST_DIR)$(MEME_LOGS)
endif

distclean-local: clean-local
clean-local: clean-ac
if WEB
	if [ -f build.xml ]; then $(ANT) clean; fi
	rm -f build.xml MemeSuite.properties
endif

clean-ac:
	rm -rf autom4te.cache

test:
	$(MAKE) check

install-data-hook: dbdir
if WEB
	$(ANT) install
endif

#dist-hook:

Portfile: etc/Portfile.in $(DIST_ARCHIVES)
	@echo "dist_archives: " $(DIST_ARCHIVES)
	@export rmd160=`openssl dgst -rmd160 $(DIST_ARCHIVES) | sed -e 's/^.*= //'`; \
	  export sha256=`openssl dgst -sha256 $(DIST_ARCHIVES) | sed -e 's/^.*= //'`; \
	  export filesize=`stat -f %z $(DIST_ARCHIVES)`; \
	  sed -e "s/@RMD160@/$$rmd160/" \
	      -e "s/@SHA256@/$$sha256/" \
	      -e "s/@FILESIZE@/$$filesize/" \
	      -e "s/@ARCHIVE_VERSION@/$(VERSION)/" < etc/Portfile.in > Portfile
	@mkdir -p ~/ports/science/memesuite
	@cp Portfile ~/ports/science/memesuite
	@portindex -f -o ~/ports ~/ports

# Create development single architecture Docker image in local repository using tar file in current directory.
# Tag is $(VERSION)_local.
Dockerfile.local: etc/Dockerfile.in
	scripts/simplepp -DDEVEL -DLOCAL < etc/Dockerfile.in | \
	  sed -e 's%@ARCHIVE_VERSION@%$(VERSION)%g' > $@
	docker build -t tlbailey/memesuite:$(VERSION)_local --build-arg CACHEBUST="`date`" --progress plain -f $@ .

# Create development single architecture Docker image in local repository using tar file at meme-suite.org.
# Tag is $(VERSION)_devel.
Dockerfile.devel: etc/Dockerfile.in
	scripts/simplepp -DDEVEL < etc/Dockerfile.in | \
	  sed -e 's%@ARCHIVE_VERSION@%$(VERSION)%g' > $@
	docker build -t tlbailey/memesuite:$(VERSION)_devel --build-arg CACHEBUST="`date`" -f $@ .

# Create development multiple architecture Docker image in tlbailey/memesuite on hub using tar file
# in current directory.
# Tag is $(VERSION)_ma_local.
# Don't delete meme-src or opal-src and include extra perl modules for testing.
Dockerfile.ma_local: etc/Dockerfile.in
	scripts/simplepp -DDEVEL -DLOCAL < etc/Dockerfile.in | \
	  sed -e 's%@ARCHIVE_VERSION@%$(VERSION)%g' > $@
	docker buildx create --use 
	docker buildx build --push --platform linux/amd64,linux/arm64 -t tlbailey/memesuite:$(VERSION)_ma_local --build-arg CACHEBUST="`date`" -f $@ .

# Create development multiple architecture Docker image in tlbailey/memesuite repository using remote tar file.
# Tag is $(VERSION)_ma_devel.
# Don't delete meme-src or opal-src and include extra perl modules for testing.
Dockerfile.ma_devel: etc/Dockerfile.in
	scripts/simplepp -DDEVEL < etc/Dockerfile.in | \
	  sed -e 's%@ARCHIVE_VERSION@%$(VERSION)%g' > $@
	docker buildx create --use 
	docker buildx build --push --platform linux/amd64,linux/arm64 -t tlbailey/memesuite:$(VERSION)_ma_devel --build-arg CACHEBUST="`date`" -f $@ .

# Create final multiple architecture Docker image in the tlbailey/memesuite repository using remote tar file.
# Tag is $(VERSION).
# After testing, push it to the hub in memesuite/memesuite and tag it as "latest".
# docker buildx imagetools create --tag memesuite/memesuite:5.5.3 tlbailey/memesuite:5.5.3
# docker buildx imagetools create --tag memesuite/memesuite:latest memesuite/memesuite:5.5.3
Dockerfile: etc/Dockerfile.in
	scripts/simplepp < etc/Dockerfile.in | \
	  sed -e 's%@ARCHIVE_VERSION@%$(VERSION)%g' > $@
	docker buildx create --use 
	docker buildx build --push --platform linux/amd64,linux/arm64 -t tlbailey/memesuite:$(VERSION) --build-arg CACHEBUST="`date`" -f $@ .

BUILT_SOURCES = ARCHIVE_REVISION ARCHIVE_DATE 

if WEBSITE
BUILT_SOURCES += MemeSuite.properties build.xml
endif

EXTRA_DIST = ARCHIVE_REVISION ARCHIVE_DATE build.xml.in MemeSuite.properties.in website.mk $(WEBSITE_FILES)

AM_DISTCHECK_CONFIGURE_FLAGS= --enable-build-libxml2 --enable-build-libxslt 

